import scapy.all as scapy
import argparse
import ipaddress
import sys

class Colors:

	@staticmethod
	def red_color(color):
		return "\033[1;31;10m" + color

	@staticmethod
	def bright_blue(color):
		return "\033[1;34;10m" + color

	@staticmethod
	def green_color(color):
		return "\033[1;32;10m" + color

	@staticmethod
	def white_color(color):
		return "\033[1;37;10m" + color

class Parser:
	def __init__(self):
		self.args = argparse.ArgumentParser(description="Discover clients on network")
		self.args.add_argument("--ip", help="Discover hosts on the network", type=self.check_valid_ip)

		self.args_parsed = self.args.parse_args()

	def get_ip(self):
		return self.args_parsed.ip

	def check_valid_ip(self, ip):
		if not ipaddress.ip_address(ip):
			msg = "[-] Invalid IP"
			raise argparse.ArgumentError(msg)
		return ip


class ScanHosts(Parser):
	def __init__(self):
		super().__init__()
		self.ip = self.get_ip()
		print("[+] Scanning Network\n")

	def scan_network(self):
		hosts = self.ip + "/24"
		arp_request = scapy.ARP(pdst=hosts)
		broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
		arp_request_broadcast = broadcast / arp_request
		answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

		for elements in answered_list:
			my_dict = {"ip": elements[0].psrc, "mac": elements[1].hwsrc}
			yield my_dict

	def main(self):
		dash = "-" * 25
		table = f"IP {dash} MAC\n"
		count = 0
		print(Colors.green_color(table))

		for letters in self.scan_network():
			count += 1
			ip_list = Colors.bright_blue(letters["ip"])
			mac_list = Colors.white_color(letters["mac"])
			print(ip_list, "\t", mac_list)
		print(f"\nTotal amount of hosts: {str(count)}")

if __name__ == '__main__':
	try:
		argument = sys.argv[1:]
		if "--ip" in argument:
			ScanHosts().main()
		else:
			print("Please enter an IP address to scan.")
	except IndexError:
		pass
	except PermissionError:
		print("\n[-] Invalid persmission. Try sudo")
		exit()
